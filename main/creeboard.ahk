; Generated by kalamine on 2025-01-22

; This is an AutoHotKey 1.1 script. PKL and EPKL still rely on AHK 1.1, too.
; AutoHotKey 2.0 is way too slow to emulate keyboard layouts at the moment
; — or maybe we’ve missed the proper options to speed it up.

#NoEnv
#Persistent
#InstallKeybdHook
#SingleInstance,       force
#MaxThreadsBuffer
#MaxThreadsPerHotKey   3
#MaxHotkeysPerInterval 300
#MaxThreads            20

SendMode Event ; either Event or Input
SetKeyDelay,   -1
SetBatchLines, -1
Process, Priority, , R
SetWorkingDir, %A_ScriptDir%
StringCaseSense, On


;-------------------------------------------------------------------------------
; On/Off Switch
;-------------------------------------------------------------------------------

global Active := True

HideTrayTip() {
  TrayTip  ; Attempt to hide it the normal way.
  if SubStr(A_OSVersion,1,3) = "10." {
    Menu Tray, NoIcon
    Sleep 200  ; It may be necessary to adjust this sleep.
    Menu Tray, Icon
  }
}

ShowTrayTip() {
  title := "Nêhiyawêwin"
  text := Active ? "ON" : "OFF"
  HideTrayTip()
  TrayTip, %title% , %text%, 1, 0x31
  SetTimer, HideTrayTip, -1500
}

RAlt & Alt::
Alt & RAlt::
  global Active
  Active := !Active
  ShowTrayTip()
  return

#If Active
SetTimer, ShowTrayTip, -1000  ; not working


;-------------------------------------------------------------------------------
; DeadKey Helpers
;-------------------------------------------------------------------------------

global DeadKey := ""

; Check CapsLock status, upper the char if needed and send the char
SendChar(char) {
  if % GetKeyState("CapsLock", "T") {
    if (StrLen(char) == 6) {
      ; we have something in the form of `U+NNNN `
      ; Change it to 0xNNNN so it can be passed to `Chr` function
      char := Chr("0x" SubStr(char, 3, 4))
    }
    StringUpper, char, char
  }
  Send, {%char%}
}

DoTerm(base:="") {
  global DeadKey

  term := SubStr(DeadKey, 2, 1)

  Send, {%term%}
  SendChar(base)
  DeadKey := ""
}

DoAction(action:="") {
  global DeadKey

  if (action == "U+0020") {
    Send, {SC39}
    DeadKey := ""
  }
  else if (StrLen(action) != 2) {
    SendChar(action)
    DeadKey := ""
  }
  else if (action == DeadKey) {
    DoTerm(SubStr(DeadKey, 2, 1))
  }
  else {
    DeadKey := action
  }
}

SendKey(base, deadkeymap) {
  if (!DeadKey) {
    DoAction(base)
  }
  else if (deadkeymap.HasKey(DeadKey)) {
    DoAction(deadkeymap[DeadKey])
  }
  else {
    DoTerm(base)
  }
}


;-------------------------------------------------------------------------------
; Base
;-------------------------------------------------------------------------------

;  Digits

 SC02::SendKey("U+140a", {}) ; ᐊ
+SC02::SendKey("U+140b", {}) ; ᐋ

 SC03::SendKey("U+1438", {}) ; ᐸ
+SC03::SendKey("U+1439", {}) ; ᐹ

 SC04::SendKey("U+1455", {}) ; ᑕ
+SC04::SendKey("U+1456", {}) ; ᑖ

 SC05::SendKey("U+1472", {}) ; ᑲ
+SC05::SendKey("U+1473", {}) ; ᑳ

 SC06::SendKey("U+1490", {}) ; ᒐ
+SC06::SendKey("U+1491", {}) ; ᒑ

 SC07::SendKey("U+14aa", {}) ; ᒪ
+SC07::SendKey("U+14ab", {}) ; ᒫ

 SC08::SendKey("U+14c7", {}) ; ᓇ
+SC08::SendKey("U+14c8", {}) ; ᓈ

 SC09::SendKey("U+14f4", {}) ; ᓴ
+SC09::SendKey("U+14f5", {}) ; ᓵ

 SC0a::SendKey("U+152d", {}) ; ᔭ
+SC0a::SendKey("U+152e", {}) ; ᔮ

;  Letters, first row

 SC10::SendKey("U+1401", {}) ; ᐁ
+SC10::SendKey("U+1427", {}) ; ᐧ

 SC11::SendKey("U+142f", {}) ; ᐯ
+SC11::SendKey("U+144a", {}) ; ᑊ

 SC12::SendKey("U+144c", {}) ; ᑌ
+SC12::SendKey("U+141f", {}) ; ᐟ

 SC13::SendKey("U+146b", {}) ; ᑫ
+SC13::SendKey("U+1420", {}) ; ᐠ

 SC14::SendKey("U+1489", {}) ; ᒉ
+SC14::SendKey("U+1428", {}) ; ᐨ

 SC15::SendKey("U+14a3", {}) ; ᒣ
+SC15::SendKey("U+14bc", {}) ; ᒼ

 SC16::SendKey("U+14c0", {}) ; ᓀ
+SC16::SendKey("U+1423", {}) ; ᐣ

 SC17::SendKey("U+14ed", {}) ; ᓭ
+SC17::SendKey("U+1422", {}) ; ᐢ

 SC18::SendKey("U+1526", {}) ; ᔦ
+SC18::SendKey("U+1540", {}) ; ᕀ

 SC19::SendKey("U+1426", {}) ; ᐦ
+SC19::SendKey("U+1426", {}) ; ᐦ

;  Letters, second row

 SC1e::SendKey("U+1403", {}) ; ᐃ
+SC1e::SendKey("U+1404", {}) ; ᐄ

 SC1f::SendKey("U+1431", {}) ; ᐱ
+SC1f::SendKey("U+1432", {}) ; ᐲ

 SC20::SendKey("U+144e", {}) ; ᑎ
+SC20::SendKey("U+144f", {}) ; ᑏ

 SC21::SendKey("U+146d", {}) ; ᑭ
+SC21::SendKey("U+146e", {}) ; ᑮ

 SC22::SendKey("U+148b", {}) ; ᒋ
+SC22::SendKey("U+148c", {}) ; ᒌ

 SC23::SendKey("U+14a5", {}) ; ᒥ
+SC23::SendKey("U+14a6", {}) ; ᒦ

 SC24::SendKey("U+14c2", {}) ; ᓂ
+SC24::SendKey("U+14c3", {}) ; ᓃ

 SC25::SendKey("U+14ef", {}) ; ᓯ
+SC25::SendKey("U+14f0", {}) ; ᓰ

 SC26::SendKey("U+1528", {}) ; ᔨ
+SC26::SendKey("U+1529", {}) ; ᔩ

 SC27::SendKey("U+003b", {}) ; ;
+SC27::SendKey("U+003a", {}) ; :

;  Letters, third row

 SC2c::SendKey("U+1405", {}) ; ᐅ
+SC2c::SendKey("U+1406", {}) ; ᐆ

 SC2d::SendKey("U+1433", {}) ; ᐳ
+SC2d::SendKey("U+1434", {}) ; ᐴ

 SC2e::SendKey("U+1450", {}) ; ᑐ
+SC2e::SendKey("U+1451", {}) ; ᑑ

 SC2f::SendKey("U+146f", {}) ; ᑯ
+SC2f::SendKey("U+1470", {}) ; ᑰ

 SC30::SendKey("U+148d", {}) ; ᒍ
+SC30::SendKey("U+148e", {}) ; ᒎ

 SC31::SendKey("U+14a7", {}) ; ᒧ
+SC31::SendKey("U+14a8", {}) ; ᒨ

 SC32::SendKey("U+14c4", {}) ; ᓄ
+SC32::SendKey("U+14c5", {}) ; ᓅ

 SC33::SendKey("U+14f1", {}) ; ᓱ
+SC33::SendKey("U+14f2", {}) ; ᓲ

 SC34::SendKey("U+152a", {}) ; ᔪ
+SC34::SendKey("U+152b", {}) ; ᔫ

 SC35::SendKey("U+002f", {}) ; /
+SC35::SendKey("U+003f", {}) ; ?

;  Pinky keys

 SC1a::SendKey("U+1424", {}) ; ᐤ
+SC1a::SendKey("U+1424", {}) ; ᐤ

 SC28::SendKey("U+0027", {}) ; '
+SC28::SendKey("U+0022", {}) ; "

 SC29::SendKey("U+0060", {}) ; `
+SC29::SendKey("U+007e", {}) ; ~

 SC2b::SendKey("U+005c", {}) ; \
+SC2b::SendKey("U+007c", {}) ; |

 SC56::SendKey("U+005c", {}) ; \
+SC56::SendKey("U+007c", {}) ; |

;  Space bar

 SC39::SendKey("U+0020", {}) ;  
+SC39::SendKey("U+0020", {}) ;  


;-------------------------------------------------------------------------------
; Ctrl
;-------------------------------------------------------------------------------

;  Digits

;  Letters, first row

;  Letters, second row

;  Letters, third row

;  Pinky keys

;  Space bar

